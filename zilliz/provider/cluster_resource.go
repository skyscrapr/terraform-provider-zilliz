// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"context"
	"fmt"
	"terraform-provider-zilliz/zilliz"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ClusterResource{}

// var _ resource.ResourceWithImportState = &ClusterResource{}

func NewClusterResource() resource.Resource {
	return &ClusterResource{}
}

// ClusterResource defines the resource implementation.
type ClusterResource struct {
	client *zilliz.Client
}

func (r *ClusterResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_cluster"
}

func (r *ClusterResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Cluster resource",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "Cluster identifier",
				Computed:            true,
			},
			"plan": schema.StringAttribute{
				MarkdownDescription: "The plan tier of the Zilliz Cloud service. Available options are Standard and Enterprise.",
				Required:            true,
			},
			"cluster_name": schema.StringAttribute{
				MarkdownDescription: "The name of the cluster to be created. It is a string of no more than 32 characters.",
				Required:            true,
			},
			"cu_size": schema.Int64Attribute{
				MarkdownDescription: "The size of the CU to be used for the created cluster. It is an integer from 1 to 256.",
				Required:            true,
			},
			"cu_type": schema.StringAttribute{
				MarkdownDescription: "The type of the CU used for the Zilliz Cloud cluster to be created. Available options are Performance-optimized, Capacity-optimized, and Cost-optimized. This parameter defaults to Performance-optimized. The value defaults to Performance-optimized.",
				Required:            true,
			},
			"project_id": schema.StringAttribute{
				MarkdownDescription: "The ID of the project where the cluster is to be created.",
				Required:            true,
			},
			"username": schema.StringAttribute{
				MarkdownDescription: "The name of the cluster user generated by default.",
				Computed:            true,
			},
			"password": schema.StringAttribute{
				MarkdownDescription: "The password of the cluster user generated by default. It will not be displayed again, so note it down and securely store it.",
				Computed:            true,
			},
			"prompt": schema.StringAttribute{
				MarkdownDescription: "The statement indicating that this operation succeeds.",
				Computed:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "An optional description about the cluster.",
				Computed:            true,
			},
			"region_id": schema.StringAttribute{
				MarkdownDescription: "The ID of the region where the cluster exists.",
				Computed:            true,
			},
			"cluster_type": schema.StringAttribute{
				MarkdownDescription: "The type of CU associated with the cluster. Possible values are Performance-optimized and Capacity-optimized.",
				Computed:            true,
			},
			"status": schema.StringAttribute{
				MarkdownDescription: "The current status of the cluster. Possible values are INITIALIZING, RUNNING, SUSPENDING, and RESUMING.",
				Computed:            true,
			},
			"connect_address": schema.StringAttribute{
				MarkdownDescription: "The public endpoint of the cluster. You can connect to the cluster using this endpoint from the public network.",
				Computed:            true,
			},
			"private_link_address": schema.StringAttribute{
				MarkdownDescription: "The private endpoint of the cluster. You can set up a private link to allow your VPS in the same cloud region to access your cluster.",
				Computed:            true,
			},
			"create_time": schema.StringAttribute{
				MarkdownDescription: "The time at which the cluster has been created.",
				Computed:            true,
			},
		},
	}
}

func (r *ClusterResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*zilliz.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ClusterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data ClusterResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	response, err := r.client.CreateCluster(zilliz.CreateClusterParams{
		Plan:        data.Plan.ValueString(),
		ClusterName: data.ClusterName.ValueString(),
		CUSize:      int(data.CuSize.ValueInt64()),
		CUType:      data.CuType.ValueString(),
		ProjectId:   data.ProjectId.ValueString(),
	})
	if err != nil {
		resp.Diagnostics.AddError("Failed to create cluster", err.Error())
		return
	}

	data.ClusterId = types.StringValue(response.ClusterId)
	data.Username = types.StringValue(response.Username)
	data.Password = types.StringValue(response.Password)
	data.Prompt = types.StringValue(response.Prompt)

	resp.Diagnostics.Append(data.refresh(r.client)...)
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ClusterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data ClusterResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(data.refresh(r.client)...)
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Collections currently do not support updates
}

func (r *ClusterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data ClusterResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	_, err := r.client.DropCluster(data.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to drop cluster", err.Error())
		return
	}
}

// Cannot support import due to the username/password attributes only available on creation
// func (r *ClusterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
// 	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
// }

// ClusterResourceModel describes the resource data model.
type ClusterResourceModel struct {
	ClusterId          types.String `tfsdk:"id"`
	Plan               types.String `tfsdk:"plan"`
	ClusterName        types.String `tfsdk:"cluster_name"`
	CuSize             types.Int64  `tfsdk:"cu_size"`
	CuType             types.String `tfsdk:"cu_type"`
	ProjectId          types.String `tfsdk:"project_id"`
	Username           types.String `tfsdk:"username"`
	Password           types.String `tfsdk:"password"`
	Prompt             types.String `tfsdk:"prompt"`
	Description        types.String `tfsdk:"description"`
	RegionId           types.String `tfsdk:"region_id"`
	ClusterType        types.String `tfsdk:"cluster_type"`
	Status             types.String `tfsdk:"status"`
	ConnectAddress     types.String `tfsdk:"connect_address"`
	PrivateLinkAddress types.String `tfsdk:"private_link_address"`
	CreateTime         types.String `tfsdk:"create_time"`
}

func (data *ClusterResourceModel) refresh(client *zilliz.Client) diag.Diagnostics {
	var diags diag.Diagnostics

	c, err := client.DescribeCluster(data.ClusterId.ValueString())
	if err != nil {
		diags.AddError("Client Error", fmt.Sprintf("Unable to DescribeCluster, got error: %s", err))
		return diags
	}

	// Save data into Terraform state
	data.ClusterId = types.StringValue(c.ClusterId)
	data.ClusterName = types.StringValue(c.ClusterName)
	data.CuSize = types.Int64Value(c.CuSize)

	data.Description = types.StringValue(c.Description)
	data.RegionId = types.StringValue(c.RegionId)
	data.ClusterType = types.StringValue(c.ClusterType)
	data.Status = types.StringValue(c.Status)
	data.ConnectAddress = types.StringValue(c.ConnectAddress)
	data.PrivateLinkAddress = types.StringValue(c.PrivateLinkAddress)
	data.CreateTime = types.StringValue(c.CreateTime)

	return diags
}
